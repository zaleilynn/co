/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef collector_TYPES_H
#define collector_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





typedef struct _ExecutorStat__isset {
  _ExecutorStat__isset() : fr_name(false), task_id(false), used_cpu(false), used_memory(false), task_num(false) {}
  bool fr_name;
  bool task_id;
  bool used_cpu;
  bool used_memory;
  bool task_num;
} _ExecutorStat__isset;

class ExecutorStat {
 public:

  static const char* ascii_fingerprint; // = "E40E1588EB7BA2D84A76955DDC7B5741";
  static const uint8_t binary_fingerprint[16]; // = {0xE4,0x0E,0x15,0x88,0xEB,0x7B,0xA2,0xD8,0x4A,0x76,0x95,0x5D,0xDC,0x7B,0x57,0x41};

  ExecutorStat() : fr_name(), task_id(0), used_cpu(0), used_memory(0), task_num(0) {
  }

  virtual ~ExecutorStat() throw() {}

  std::string fr_name;
  int64_t task_id;
  double used_cpu;
  int32_t used_memory;
  int32_t task_num;

  _ExecutorStat__isset __isset;

  void __set_fr_name(const std::string& val) {
    fr_name = val;
  }

  void __set_task_id(const int64_t val) {
    task_id = val;
  }

  void __set_used_cpu(const double val) {
    used_cpu = val;
  }

  void __set_used_memory(const int32_t val) {
    used_memory = val;
  }

  void __set_task_num(const int32_t val) {
    task_num = val;
  }

  bool operator == (const ExecutorStat & rhs) const
  {
    if (!(fr_name == rhs.fr_name))
      return false;
    if (!(task_id == rhs.task_id))
      return false;
    if (!(used_cpu == rhs.used_cpu))
      return false;
    if (!(used_memory == rhs.used_memory))
      return false;
    if (!(task_num == rhs.task_num))
      return false;
    return true;
  }
  bool operator != (const ExecutorStat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExecutorStat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ExecutorStat &a, ExecutorStat &b);

typedef struct _MachineInfo__isset {
  _MachineInfo__isset() : endpoint(false), usage(false), cpu(false), memory(false), avail_cpu(false), avail_memory(false), executor_list(false) {}
  bool endpoint;
  bool usage;
  bool cpu;
  bool memory;
  bool avail_cpu;
  bool avail_memory;
  bool executor_list;
} _MachineInfo__isset;

class MachineInfo {
 public:

  static const char* ascii_fingerprint; // = "F8612554AD79DE7BA7BD173ACB725701";
  static const uint8_t binary_fingerprint[16]; // = {0xF8,0x61,0x25,0x54,0xAD,0x79,0xDE,0x7B,0xA7,0xBD,0x17,0x3A,0xCB,0x72,0x57,0x01};

  MachineInfo() : endpoint(), usage(0), cpu(0), memory(0), avail_cpu(0), avail_memory(0) {
  }

  virtual ~MachineInfo() throw() {}

  std::string endpoint;
  double usage;
  int32_t cpu;
  int32_t memory;
  double avail_cpu;
  int32_t avail_memory;
  std::vector<ExecutorStat>  executor_list;

  _MachineInfo__isset __isset;

  void __set_endpoint(const std::string& val) {
    endpoint = val;
  }

  void __set_usage(const double val) {
    usage = val;
  }

  void __set_cpu(const int32_t val) {
    cpu = val;
  }

  void __set_memory(const int32_t val) {
    memory = val;
  }

  void __set_avail_cpu(const double val) {
    avail_cpu = val;
  }

  void __set_avail_memory(const int32_t val) {
    avail_memory = val;
  }

  void __set_executor_list(const std::vector<ExecutorStat> & val) {
    executor_list = val;
  }

  bool operator == (const MachineInfo & rhs) const
  {
    if (!(endpoint == rhs.endpoint))
      return false;
    if (!(usage == rhs.usage))
      return false;
    if (!(cpu == rhs.cpu))
      return false;
    if (!(memory == rhs.memory))
      return false;
    if (!(avail_cpu == rhs.avail_cpu))
      return false;
    if (!(avail_memory == rhs.avail_memory))
      return false;
    if (!(executor_list == rhs.executor_list))
      return false;
    return true;
  }
  bool operator != (const MachineInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MachineInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MachineInfo &a, MachineInfo &b);



#endif
