/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "scheduler_types.h"

#include <algorithm>



const char* TaskInfo::ascii_fingerprint = "C01EC14F56CAE147909C7C9A29219C0B";
const uint8_t TaskInfo::binary_fingerprint[16] = {0xC0,0x1E,0xC1,0x4F,0x56,0xCA,0xE1,0x47,0x90,0x9C,0x7C,0x9A,0x29,0x21,0x9C,0x0B};

uint32_t TaskInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->framework_name);
          this->__isset.framework_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cmd);
          this->__isset.cmd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->arguments);
          this->__isset.arguments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->candidate_ips);
          this->__isset.candidate_ips = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->transfer_files);
          this->__isset.transfer_files = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->need_cpu);
          this->__isset.need_cpu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->need_memory);
          this->__isset.need_memory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TaskInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TaskInfo");

  xfer += oprot->writeFieldBegin("framework_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->framework_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cmd", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->cmd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("arguments", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->arguments);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("candidate_ips", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->candidate_ips);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transfer_files", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->transfer_files);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("need_cpu", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->need_cpu);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("need_memory", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->need_memory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TaskInfo &a, TaskInfo &b) {
  using ::std::swap;
  swap(a.framework_name, b.framework_name);
  swap(a.id, b.id);
  swap(a.cmd, b.cmd);
  swap(a.arguments, b.arguments);
  swap(a.candidate_ips, b.candidate_ips);
  swap(a.transfer_files, b.transfer_files);
  swap(a.need_cpu, b.need_cpu);
  swap(a.need_memory, b.need_memory);
  swap(a.__isset, b.__isset);
}

const char* FrameworkInfo::ascii_fingerprint = "A2F6FEE8052EF81D7C843808325D27F8";
const uint8_t FrameworkInfo::binary_fingerprint[16] = {0xA2,0xF6,0xFE,0xE8,0x05,0x2E,0xF8,0x1D,0x7C,0x84,0x38,0x08,0x32,0x5D,0x27,0xF8};

uint32_t FrameworkInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->quota);
          this->__isset.quota = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->command);
          this->__isset.command = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->arguments);
          this->__isset.arguments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cpu);
          this->__isset.cpu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->memory);
          this->__isset.memory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FrameworkInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("FrameworkInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("quota", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->quota);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("command", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->command);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("arguments", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->arguments);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cpu", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->cpu);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memory", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->memory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FrameworkInfo &a, FrameworkInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.quota, b.quota);
  swap(a.command, b.command);
  swap(a.arguments, b.arguments);
  swap(a.cpu, b.cpu);
  swap(a.memory, b.memory);
  swap(a.__isset, b.__isset);
}


