/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Cellet_H
#define Cellet_H

#include <thrift/TDispatchProcessor.h>
#include "cellet_types.h"



class CelletIf {
 public:
  virtual ~CelletIf() {}
  virtual bool StartTask(const  ::TaskInfo& info) = 0;
  virtual int32_t KillTask(const int64_t task_id) = 0;
};

class CelletIfFactory {
 public:
  typedef CelletIf Handler;

  virtual ~CelletIfFactory() {}

  virtual CelletIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CelletIf* /* handler */) = 0;
};

class CelletIfSingletonFactory : virtual public CelletIfFactory {
 public:
  CelletIfSingletonFactory(const boost::shared_ptr<CelletIf>& iface) : iface_(iface) {}
  virtual ~CelletIfSingletonFactory() {}

  virtual CelletIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CelletIf* /* handler */) {}

 protected:
  boost::shared_ptr<CelletIf> iface_;
};

class CelletNull : virtual public CelletIf {
 public:
  virtual ~CelletNull() {}
  bool StartTask(const  ::TaskInfo& /* info */) {
    bool _return = false;
    return _return;
  }
  int32_t KillTask(const int64_t /* task_id */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _Cellet_StartTask_args__isset {
  _Cellet_StartTask_args__isset() : info(false) {}
  bool info;
} _Cellet_StartTask_args__isset;

class Cellet_StartTask_args {
 public:

  Cellet_StartTask_args() {
  }

  virtual ~Cellet_StartTask_args() throw() {}

   ::TaskInfo info;

  _Cellet_StartTask_args__isset __isset;

  void __set_info(const  ::TaskInfo& val) {
    info = val;
  }

  bool operator == (const Cellet_StartTask_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const Cellet_StartTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Cellet_StartTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Cellet_StartTask_pargs {
 public:


  virtual ~Cellet_StartTask_pargs() throw() {}

  const  ::TaskInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Cellet_StartTask_result__isset {
  _Cellet_StartTask_result__isset() : success(false) {}
  bool success;
} _Cellet_StartTask_result__isset;

class Cellet_StartTask_result {
 public:

  Cellet_StartTask_result() : success(0) {
  }

  virtual ~Cellet_StartTask_result() throw() {}

  bool success;

  _Cellet_StartTask_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Cellet_StartTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Cellet_StartTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Cellet_StartTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Cellet_StartTask_presult__isset {
  _Cellet_StartTask_presult__isset() : success(false) {}
  bool success;
} _Cellet_StartTask_presult__isset;

class Cellet_StartTask_presult {
 public:


  virtual ~Cellet_StartTask_presult() throw() {}

  bool* success;

  _Cellet_StartTask_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Cellet_KillTask_args__isset {
  _Cellet_KillTask_args__isset() : task_id(false) {}
  bool task_id;
} _Cellet_KillTask_args__isset;

class Cellet_KillTask_args {
 public:

  Cellet_KillTask_args() : task_id(0) {
  }

  virtual ~Cellet_KillTask_args() throw() {}

  int64_t task_id;

  _Cellet_KillTask_args__isset __isset;

  void __set_task_id(const int64_t val) {
    task_id = val;
  }

  bool operator == (const Cellet_KillTask_args & rhs) const
  {
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const Cellet_KillTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Cellet_KillTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Cellet_KillTask_pargs {
 public:


  virtual ~Cellet_KillTask_pargs() throw() {}

  const int64_t* task_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Cellet_KillTask_result__isset {
  _Cellet_KillTask_result__isset() : success(false) {}
  bool success;
} _Cellet_KillTask_result__isset;

class Cellet_KillTask_result {
 public:

  Cellet_KillTask_result() : success(0) {
  }

  virtual ~Cellet_KillTask_result() throw() {}

  int32_t success;

  _Cellet_KillTask_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Cellet_KillTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Cellet_KillTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Cellet_KillTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Cellet_KillTask_presult__isset {
  _Cellet_KillTask_presult__isset() : success(false) {}
  bool success;
} _Cellet_KillTask_presult__isset;

class Cellet_KillTask_presult {
 public:


  virtual ~Cellet_KillTask_presult() throw() {}

  int32_t* success;

  _Cellet_KillTask_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CelletClient : virtual public CelletIf {
 public:
  CelletClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  CelletClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool StartTask(const  ::TaskInfo& info);
  void send_StartTask(const  ::TaskInfo& info);
  bool recv_StartTask();
  int32_t KillTask(const int64_t task_id);
  void send_KillTask(const int64_t task_id);
  int32_t recv_KillTask();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CelletProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CelletIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CelletProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_StartTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_KillTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CelletProcessor(boost::shared_ptr<CelletIf> iface) :
    iface_(iface) {
    processMap_["StartTask"] = &CelletProcessor::process_StartTask;
    processMap_["KillTask"] = &CelletProcessor::process_KillTask;
  }

  virtual ~CelletProcessor() {}
};

class CelletProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CelletProcessorFactory(const ::boost::shared_ptr< CelletIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CelletIfFactory > handlerFactory_;
};

class CelletMultiface : virtual public CelletIf {
 public:
  CelletMultiface(std::vector<boost::shared_ptr<CelletIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CelletMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CelletIf> > ifaces_;
  CelletMultiface() {}
  void add(boost::shared_ptr<CelletIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool StartTask(const  ::TaskInfo& info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StartTask(info);
    }
    return ifaces_[i]->StartTask(info);
  }

  int32_t KillTask(const int64_t task_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->KillTask(task_id);
    }
    return ifaces_[i]->KillTask(task_id);
  }

};



#endif
